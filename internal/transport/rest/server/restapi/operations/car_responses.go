// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/z7zmey/golang-microservice-boilerplate/internal/transport/rest/server/models"
)

// CarOKCode is the HTTP code returned for type CarOK
const CarOKCode int = 200

/*CarOK OK

swagger:response carOK
*/
type CarOK struct {

	/*
	  In: Body
	*/
	Payload *CarOKBody `json:"body,omitempty"`
}

// NewCarOK creates CarOK with default headers values
func NewCarOK() *CarOK {

	return &CarOK{}
}

// WithPayload adds the payload to the car o k response
func (o *CarOK) WithPayload(payload *CarOKBody) *CarOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the car o k response
func (o *CarOK) SetPayload(payload *CarOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CarOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CarBadRequestCode is the HTTP code returned for type CarBadRequest
const CarBadRequestCode int = 400

/*CarBadRequest Bad Argument

swagger:response carBadRequest
*/
type CarBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCarBadRequest creates CarBadRequest with default headers values
func NewCarBadRequest() *CarBadRequest {

	return &CarBadRequest{}
}

// WithPayload adds the payload to the car bad request response
func (o *CarBadRequest) WithPayload(payload *models.Error) *CarBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the car bad request response
func (o *CarBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CarBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CarNotFoundCode is the HTTP code returned for type CarNotFound
const CarNotFoundCode int = 404

/*CarNotFound Not found

swagger:response carNotFound
*/
type CarNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCarNotFound creates CarNotFound with default headers values
func NewCarNotFound() *CarNotFound {

	return &CarNotFound{}
}

// WithPayload adds the payload to the car not found response
func (o *CarNotFound) WithPayload(payload *models.Error) *CarNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the car not found response
func (o *CarNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CarNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CarInternalServerErrorCode is the HTTP code returned for type CarInternalServerError
const CarInternalServerErrorCode int = 500

/*CarInternalServerError Internal Server Error

swagger:response carInternalServerError
*/
type CarInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCarInternalServerError creates CarInternalServerError with default headers values
func NewCarInternalServerError() *CarInternalServerError {

	return &CarInternalServerError{}
}

// WithPayload adds the payload to the car internal server error response
func (o *CarInternalServerError) WithPayload(payload *models.Error) *CarInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the car internal server error response
func (o *CarInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CarInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
